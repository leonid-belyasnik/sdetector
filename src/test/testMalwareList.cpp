#include <stdio.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include "malware_list.h"
#include "common.h"
#include "config.h"

#ifdef _USE_VLD
#include <vld.h>
#endif

using namespace T1;

namespace internal {
	std::string raw2hex(const unsigned char *data, int len)
	{
		std::stringstream ss;
		ss << std::hex;
		for (int i = 0; i < len; ++i)
			ss << std::setw(2) << std::setfill('0') << (int)data[i];

		return ss.str();
	}
}

int main(int argc, char* argv[])
{
	std::ofstream ofmwl(MLFILE);
	ofmwl << "01ABEDFF55.{ab306a70-0fd2-4b4b-84fe-f9ebd899d90f}" << std::endl;
	ofmwl << "EE21DEAD827739ACCD028FFC.{5c34b10f-3f6d-4bbb-b9ec-2faa1ee07660}" << std::endl;
	ofmwl.close();

	MalwareList ML;

	if (ML.is_exists(MLFILE))
		std::cout << "Exists: OK" << std::endl;
	else
		std::cerr << "ERROR: Not exists!" << std::endl;

	int countl = ML.load(MLFILE);

	std::cout << "Loaded: " << countl << std::endl;

	if (ML.is_empty())
		std::cerr << "ERROR: List Empty!" << std::endl;
	else
		std::cout << "Size: " << ML.size() << std::endl;

	for (int i = 0; i < ML.size(); ++i)
	{
		const SeekData sd = ML[i];

		std::cout << "GUID: " << ((sd.s_guid.empty()) ? " - " : sd.s_guid.c_str()) << std::endl;
		std::string shex = internal::raw2hex(sd.vb_trace.data(), (int)sd.vb_trace.size());
		std::cout << "trace hex: " << ((shex.empty())? " - " : shex.c_str()) << std::endl;
	}

    return 0;
}

