#include <stdio.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <cstring>
#include "malware_list.h"
#include "seeker.h"
#include "common.h"
#include "config.h"

#ifdef _USE_VLD
#include <vld.h>
#endif

using namespace T1;

namespace internal {
	std::string raw2hex(const unsigned char *data, int len)
	{
		std::stringstream ss;
		ss << std::hex;
		for (int i = 0; i < len; ++i)
			ss << std::setw(2) << std::setfill('0') << (int)data[i];

		return ss.str();
	}
}

int main(int argc, char* argv[])
{
	const uint8_t buf[] = {
		0xDD,0xD1,0xD1,0xC8,0x12,0x69,0xA6,0xA0,0x47,0xF5,0x7B,0xF9,0xB0,0x26,0xA2,0xA9,
		0x0B,0xC7,0x00,0x7F,0x89,0x1F,0x32,0xE5,0x96,0x4A,0x3A,0x69,0x58,0x9F,0x6C,0xD3,
		0x3F,0x6D,0x95,0x0D,0x70,0x53,0xD1,0x28,0xEC,0x17,0x29,0xCF,0xC5,0x50,0x88,0x0C,
		0x78,0x72,0xED,0xB9,0xD6,0xC2,0xA3,0x01,0xC7,0x27,0xC9,0x90,0x21,0x98,0x6E,0xA8,
		0x83,0xE5,0x0F,0x9E,0xF9,0xFF,0xD3,0x81,0xB0,0x61,0x61,0x63,0x63,0x62,0x63,0x63,
		0x62,0x63,0x63,0xC3,0xDE,0x9E,0x53,0xB4,0x96,0x96,0x9A,0x42,0xDE,0x31,0xF4,0x70,
		0x9C,0x41,0xEA,0x90,0x50,0x69,0x44,0x7B,0x00,0x64,0x76,0x17,0x29,0xC1,0xD3,0xD7,
		0x46,0xB6,0xC1,0x2F,0x91,0x97,0x65,0x44,0x3B,0xC6,0xB0,0xDA,0x8A,0xE2,0xA1,0x70,
		0x8E,0x5B,0xAD,0x22
	};

	const uint8_t s[] = {
		0x61,0x61,0x63,0x63,0x62,0x63,0x63,0x62,0x63,0x63
	};

	const int testpos = 73;

	std::ofstream file(TESTFILE, std::ofstream::binary | std::ofstream::out);
	file.write(reinterpret_cast<const char*>(buf), sizeof(buf));
	file.close();

	std::ofstream ofmwl(MLFILE);
	ofmwl << "61616363626363626363.{\"aaccbccbcc\"}" << std::endl;
	ofmwl << "EAEEEBEEEAEEEB.{\"колокол\"}" << std::endl;
	ofmwl.close();

	MalwareList ML;
	ML.load(MLFILE);

	BMSeeker mm_seeker(TESTFILE);

	std::cout << "-------------------------------------" << std::endl;
	for (int i = 0; i < ML.size(); ++i)
	{
		const SeekData sd = ML[i];
		
		std::cout << "GUID: " << ((sd.s_guid.empty()) ? " - " : sd.s_guid.c_str()) << std::endl;
		std::cout << "suffshift: ";
		for (const auto i : sd.vn_suffshift)
			std::cout << i << ' ';

		std::cout << std::endl;
		std::string shex = internal::raw2hex(sd.vb_trace.data(), (int)sd.vb_trace.size());
		std::cout << "trace hex: " << ((shex.empty()) ? " - " : shex.c_str()) << std::endl;
		std::cout << "search ------> ";

		int pos = mm_seeker.find(sd);
		std::cout << "pos: " << pos << std::endl;

		if (memcmp(sd.vb_trace.data(), s, sizeof(s)) == 0)
		{
			if (pos == testpos)
				std::cout << "========== TEST = OK ============" << std::endl;
			else
				std::cerr << "========== TEST = ERROR ===========" << std::endl;
		}
	}
	std::cout << "-------------------------------------" << std::endl;

	return 0;
}

