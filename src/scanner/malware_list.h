/**
* \file		malware_list.h
* \brief	Load and parse file that containts list of malware signatures.
*
* \author	Leonid Belyasnik (leonid.belyasnik@gmail.com)
* \date		12/05/2017
*/

#ifndef MALWARELIST_H
#define MALWARELIST_H

#pragma once
#include <string>
#include <vector>
#include "seeker.h"

/**
*	namespace T1
*	\brief Test 1
*/
namespace T1 {
	/**
	* \brief	List of datasets for search.
	*/
	class MalwareList
	{
		std::vector<SeekData> m_box;	///< Prepared data to search.
	private:
		/**
		* Find in file.
		*
		* \param [in]	guid	Malware GUID.
		* \param [in]	hextrace	Desired string in hex.
		*/
		void add(const std::string& guid, const std::string& hextrace);
	public:
		/**
		* Constructor.
		*/
		MalwareList() {}
		/**
		* Destructor.
		*/
		~MalwareList(void) {}
		/**
		* Load and parse file.
		*
		* \param [in]	filename	Path to file.
		*
		* \return	Number of loaded.
		*/
		int load(const char* filename);
		/**
		* Check if empty list.
		*
		* \return	True if empty, else false.
		*/
		bool is_empty(void) const;
		/**
		* Check if exists file.
		*
		* \param [in]	filename	Path to file.
		*
		* \return	True if exists, else false.
		*/
		bool is_exists(const char* filename) const;
		/**
		* Get size of datasets list.
		*
		* \return	Size of datasets list.
		*/
		size_t size() const;
		/**
		* Overload operator [] - get one of search dataset.
		*
		* \param [in]	pos	Position in list.
		*
		* \return	Dataset for search.
		*/
		const SeekData operator[](size_t pos) const;
	};

} // T1

#endif //MALWARELIST_H